// @generated by protobuf-ts 2.9.0 with parameter server_grpc1
// @generated from protobuf file "example.proto" (syntax proto3)
// tslint:disable
import { CreateUserRequest } from "./example";
import { User } from "./example";
import { GetUserRequest } from "./example";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service UserService
 */
export interface IUserService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: GetUser(GetUserRequest) returns (User);
     */
    getUser: grpc.handleUnaryCall<GetUserRequest, User>;
    /**
     * @generated from protobuf rpc: Createuser(CreateUserRequest) returns (User);
     */
    createuser: grpc.handleUnaryCall<CreateUserRequest, User>;
}
/**
 * @grpc/grpc-js definition for the protobuf service UserService.
 *
 * Usage: Implement the interface IUserService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IUserService = ...
 * server.addService(userServiceDefinition, service);
 * ```
 */
export const userServiceDefinition: grpc.ServiceDefinition<IUserService> = {
    getUser: {
        path: "/UserService/GetUser",
        originalName: "GetUser",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => User.fromBinary(bytes),
        requestDeserialize: bytes => GetUserRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(User.toBinary(value)),
        requestSerialize: value => Buffer.from(GetUserRequest.toBinary(value))
    },
    createuser: {
        path: "/UserService/Createuser",
        originalName: "Createuser",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => User.fromBinary(bytes),
        requestDeserialize: bytes => CreateUserRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(User.toBinary(value)),
        requestSerialize: value => Buffer.from(CreateUserRequest.toBinary(value))
    }
};
